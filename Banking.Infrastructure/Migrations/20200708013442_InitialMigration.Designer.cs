// <auto-generated />
using System;
using Banking.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Banking.Infrastructure.Migrations
{
    [DbContext(typeof(BankingContext))]
    [Migration("20200708013442_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Banking.Domain.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Rentabilize")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 0m,
                            BranchId = 1,
                            Code = "123456",
                            Enabled = true,
                            Rentabilize = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Balance = 10000m,
                            BranchId = 1,
                            Code = "122334",
                            Enabled = true,
                            Rentabilize = true,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Balance = 10000m,
                            BranchId = 2,
                            Code = "365654",
                            Enabled = true,
                            Rentabilize = true,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Balance = 10000m,
                            BranchId = 2,
                            Code = "567989",
                            Enabled = true,
                            Rentabilize = true,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("Banking.Domain.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Number = 1234
                        },
                        new
                        {
                            Id = 2,
                            Number = 4567
                        });
                });

            modelBuilder.Entity("Banking.Domain.Entities.Operations.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("OperationType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Date", "AccountId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("Banking.Domain.Entities.TicketPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.ToTable("TicketPayments");
                });

            modelBuilder.Entity("Banking.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@gmail.com",
                            Enabled = true,
                            Name = "Admin",
                            Password = "admin",
                            Phone = "+55 51 987654321"
                        },
                        new
                        {
                            Id = 2,
                            Email = "miguel@gmail.com",
                            Enabled = true,
                            Name = "Miguel",
                            Password = "miguel",
                            Phone = "+55 51 987654321"
                        },
                        new
                        {
                            Id = 3,
                            Email = "diogo@gmail.com",
                            Enabled = true,
                            Name = "Diogo",
                            Password = "diogo",
                            Phone = "+55 51 987654321"
                        },
                        new
                        {
                            Id = 4,
                            Email = "bruna@gmail.com",
                            Enabled = true,
                            Name = "Bruna",
                            Password = "bruna",
                            Phone = "+55 51 987654321"
                        });
                });

            modelBuilder.Entity("Banking.Domain.Entities.Account", b =>
                {
                    b.HasOne("Banking.Domain.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Banking.Domain.Entities.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("Banking.Domain.Entities.Account", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Banking.Domain.Entities.Operations.Operation", b =>
                {
                    b.HasOne("Banking.Domain.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Banking.Domain.Entities.TicketPayment", b =>
                {
                    b.HasOne("Banking.Domain.Entities.Operations.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
